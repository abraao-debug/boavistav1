# materials/gemini_service.py (VERS√ÉO CORRIGIDA E ATUALIZADA)

import os
import json
import requests
from django.conf import settings

# --- 1. CONFIGURA√á√ÉO DA API ---
def get_api_key():
    """Obt√©m a chave API do Gemini das configura√ß√µes do Django"""
    try:
        return settings.GEMINI_API_KEY
    except AttributeError:
        print("ERRO: GEMINI_API_KEY n√£o encontrada nas configura√ß√µes do Django")
        return None

# --- 2. FUN√á√ÉO PARA TESTAR A CONEX√ÉO ---
def test_gemini_connection():
    """Testa se a API do Gemini est√° funcionando"""
    api_key = get_api_key()
    if not api_key:
        return False, "Chave API n√£o configurada"
    
    url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key={api_key}"
    
    data = {
        "contents": [
            {
                "parts": [
                    {
                        "text": "Teste de conex√£o"
                    }
                ]
            }
        ]
    }
    
    headers = {"Content-Type": "application/json"}
    
    try:
        response = requests.post(url, headers=headers, json=data, timeout=10)
        if response.status_code == 200:
            return True, "Conex√£o OK"
        else:
            return False, f"Erro HTTP {response.status_code}: {response.text}"
    except Exception as e:
        return False, f"Erro de conex√£o: {str(e)}"

# --- 3. FUN√á√ÉO PRINCIPAL DE CLASSIFICA√á√ÉO ---
def classify_item_with_gemini(item_description: str, categories_list: str) -> dict:
    """
    Chama a API do Gemini para classificar um item em categorias existentes ou sugerir novas.
    
    Args:
        item_description (str): Descri√ß√£o do item a ser classificado
        categories_list (str): Lista das categorias e subcategorias existentes
    
    Returns:
        dict: Resultado da classifica√ß√£o com status e dados
    """
    
    # Verificar se a API est√° configurada
    api_key = get_api_key()
    if not api_key:
        return {
            "status": "ERROR", 
            "message": "Chave API do Gemini n√£o est√° configurada. Verifique GEMINI_API_KEY nas configura√ß√µes."
        }
    
    # URL da API do Gemini (usando modelo atualizado)
    url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key={api_key}"
    
    # Prompt do sistema
    system_prompt = """Voc√™ √© um classificador de cat√°logo para constru√ß√£o civil. 

Sua tarefa √© analisar a descri√ß√£o de um item e:
1. Se o item se encaixa claramente em uma subcategoria existente (com 95% de certeza), retorne status "EXISTENTE" com os IDs
2. Se o item n√£o se encaixa em nenhuma subcategoria existente, retorne status "SUGERIR_NOVA" com nomes para nova categoria

IMPORTANTE: Responda APENAS em formato JSON v√°lido."""
    
    # Prompt completo
    full_prompt = f"""
CAT√ÅLOGO EXISTENTE:
{categories_list}

REGRAS:
1. Para status "EXISTENTE": retorne categoria_mae_id e subcategoria_id (n√∫meros)
2. Para status "SUGERIR_NOVA": retorne nova_categoria_mae e nova_subcategoria (textos)
3. Responda APENAS em JSON v√°lido

CLASSIFIQUE O SEGUINTE ITEM: {item_description}

Formato de resposta esperado:
{{
    "status": "EXISTENTE" ou "SUGERIR_NOVA",
    "categoria_mae_id": n√∫mero (apenas se EXISTENTE),
    "subcategoria_id": n√∫mero (apenas se EXISTENTE),
    "nova_categoria_mae": "texto" (apenas se SUGERIR_NOVA),
    "nova_subcategoria": "texto" (apenas se SUGERIR_NOVA)
}}
"""
    
    # Dados da requisi√ß√£o
    data = {
        "contents": [
            {
                "parts": [
                    {
                        "text": full_prompt
                    }
                ]
            }
        ],
        "generationConfig": {
            "temperature": 0.1,
            "topK": 1,
            "topP": 0.8,
            "maxOutputTokens": 1024,
        }
    }
    
    headers = {"Content-Type": "application/json"}
    
    try:
        # Fazer a requisi√ß√£o para a API
        print(f"üîç Enviando requisi√ß√£o para Gemini API...")
        response = requests.post(url, headers=headers, json=data, timeout=30)
        
        print(f"üìä Status da resposta: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            
            # Extrair o texto da resposta
            if 'candidates' in result and len(result['candidates']) > 0:
                text_response = result['candidates'][0]['content']['parts'][0]['text']
                print(f"üìù Resposta da API: {text_response}")
                
                try:
                    # Tentar fazer parse do JSON
                    classification_result = json.loads(text_response.strip())
                    
                    # Validar se tem o campo status
                    if 'status' not in classification_result:
                        return {
                            "status": "ERROR",
                            "message": "Resposta da API n√£o cont√©m campo 'status'"
                        }
                    
                    return classification_result
                    
                except json.JSONDecodeError as e:
                    return {
                        "status": "ERROR",
                        "message": f"Erro ao fazer parse do JSON da resposta: {str(e)}. Resposta: {text_response}"
                    }
            else:
                return {
                    "status": "ERROR",
                    "message": "Resposta da API n√£o cont√©m candidatos"
                }
        else:
            error_text = response.text
            print(f"‚ùå Erro na API: {error_text}")
            return {
                "status": "ERROR",
                "message": f"Erro HTTP {response.status_code}: {error_text}"
            }
            
    except requests.exceptions.Timeout:
        return {
            "status": "ERROR",
            "message": "Timeout na requisi√ß√£o para a API do Gemini"
        }
    except requests.exceptions.ConnectionError:
        return {
            "status": "ERROR",
            "message": "Erro de conex√£o com a API do Gemini"
        }
    except Exception as e:
        return {
            "status": "ERROR",
            "message": f"Erro inesperado: {str(e)}"
        }

# --- 4. FUN√á√ÉO DE COMPATIBILIDADE (para n√£o quebrar c√≥digo existente) ---
# Caso o c√≥digo antigo tente acessar gemini_model
class GeminiModelCompatibility:
    """Classe de compatibilidade para manter o c√≥digo antigo funcionando"""
    
    def __init__(self):
        self.is_configured = get_api_key() is not None
    
    def __bool__(self):
        return self.is_configured

# Criar inst√¢ncia para compatibilidade
gemini_model = GeminiModelCompatibility()

# --- 5. FUN√á√ÉO DE TESTE PARA DEBUG ---
def debug_gemini_service():
    """Fun√ß√£o para testar o servi√ßo Gemini"""
    print("üîç Testando servi√ßo Gemini...")
    
    # Testar conex√£o
    is_connected, message = test_gemini_connection()
    print(f"üì° Conex√£o: {'‚úÖ OK' if is_connected else '‚ùå ERRO'} - {message}")
    
    if is_connected:
        # Testar classifica√ß√£o
        test_description = "Cimento Portland CP-II-E-32"
        test_categories = """
        Categoria M√£e: Materiais B√°sicos (ID: 1)
        - Subcategoria: Cimento (ID: 1)
        - Subcategoria: Areia (ID: 2)
        - Subcategoria: Brita (ID: 3)
        """
        
        result = classify_item_with_gemini(test_description, test_categories)
        print(f"üß™ Teste de classifica√ß√£o: {result}")
    
    return is_connected

if __name__ == "__main__":
    debug_gemini_service()